"""
Signal and algorithm settings models for the stock scanner.
"""
from dataclasses import dataclass, asdict
from datetime import datetime
from typing import Dict, Any
import json
from .market_data import TechnicalIndicators


@dataclass
class Signal:
    """Represents a trading signal generated by the algorithm."""
    symbol: str
    signal_type: str  # 'long' or 'short'
    timestamp: datetime
    price: float
    indicators: TechnicalIndicators
    confidence: float

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for JSON serialization."""
        data = asdict(self)
        data['timestamp'] = self.timestamp.isoformat()
        data['indicators'] = self.indicators.to_dict()
        return data

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Signal':
        """Create instance from dictionary."""
        data = data.copy()
        if isinstance(data['timestamp'], str):
            data['timestamp'] = datetime.fromisoformat(data['timestamp'])
        if isinstance(data['indicators'], dict):
            data['indicators'] = TechnicalIndicators.from_dict(data['indicators'])
        return cls(**data)

    def to_json(self) -> str:
        """Convert to JSON string."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> 'Signal':
        """Create instance from JSON string."""
        return cls.from_dict(json.loads(json_str))


@dataclass
class AlgorithmSettings:
    """Configuration settings for the trading algorithm."""
    atr_multiplier: float = 2.0
    ema5_rising_threshold: float = 0.02
    ema8_rising_threshold: float = 0.01
    ema21_rising_threshold: float = 0.005
    volatility_filter: float = 1.5
    fomo_filter: float = 1.0
    higher_timeframe: str = "15m"

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for JSON serialization."""
        return asdict(self)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'AlgorithmSettings':
        """Create instance from dictionary."""
        return cls(**data)

    def to_json(self) -> str:
        """Convert to JSON string."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> 'AlgorithmSettings':
        """Create instance from JSON string."""
        return cls.from_dict(json.loads(json_str))