{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "Stock Scanner Application - Complete Azure deployment with auto-scaling capabilities"
  },
  "parameters": {
    "appName": {
      "type": "string",
      "defaultValue": "stockscanner",
      "metadata": {
        "description": "Name of the application"
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "prod",
      "allowedValues": ["dev", "staging", "prod"],
      "metadata": {
        "description": "Environment name"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "dbAdminUsername": {
      "type": "string",
      "defaultValue": "stockscanner_admin",
      "metadata": {
        "description": "Database administrator username"
      }
    },
    "dbAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Database administrator password"
      }
    },
    "appServicePlanSku": {
      "type": "string",
      "defaultValue": "S2",
      "allowedValues": ["B1", "B2", "B3", "S1", "S2", "S3", "P1v2", "P2v2", "P3v2", "P1v3", "P2v3", "P3v3"],
      "metadata": {
        "description": "App Service Plan SKU"
      }
    },
    "databaseSku": {
      "type": "string",
      "defaultValue": "GP_Standard_D2s_v3",
      "allowedValues": ["B_Standard_B1ms", "B_Standard_B2s", "GP_Standard_D2s_v3", "GP_Standard_D4s_v3", "MO_Standard_E2s_v3"],
      "metadata": {
        "description": "Database SKU"
      }
    },
    "enableHighAvailability": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable high availability for database"
      }
    },
    "enableRedis": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Azure Cache for Redis"
      }
    },
    "enableApplicationInsights": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Application Insights"
      }
    },
    "containerRegistryName": {
      "type": "string",
      "defaultValue": "[concat(parameters('appName'), 'acr', parameters('environment'))]",
      "metadata": {
        "description": "Container registry name"
      }
    },
    "autoscaleMinInstances": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "maxValue": 10,
      "metadata": {
        "description": "Minimum number of instances for auto-scaling"
      }
    },
    "autoscaleMaxInstances": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 1,
      "maxValue": 30,
      "metadata": {
        "description": "Maximum number of instances for auto-scaling"
      }
    }
  },
  "variables": {
    "resourcePrefix": "[concat(parameters('appName'), '-', parameters('environment'))]",
    "appServicePlanName": "[concat('plan-', variables('resourcePrefix'))]",
    "backendAppName": "[concat(variables('resourcePrefix'), '-backend')]",
    "frontendAppName": "[concat(variables('resourcePrefix'), '-frontend')]",
    "databaseServerName": "[concat(variables('resourcePrefix'), '-db')]",
    "databaseName": "[parameters('appName')]",
    "keyVaultName": "[concat('kv-', parameters('appName'), '-', parameters('environment'))]",
    "logAnalyticsName": "[concat('log-', variables('resourcePrefix'))]",
    "applicationInsightsName": "[concat('appi-', variables('resourcePrefix'))]",
    "autoscaleName": "[concat('autoscale-', variables('resourcePrefix'))]",
    "redisName": "[concat(variables('resourcePrefix'), '-redis')]",
    "vnetName": "[concat('vnet-', variables('resourcePrefix'))]",
    "appSubnetName": "[concat('snet-app-', parameters('environment'))]",
    "dbSubnetName": "[concat('snet-db-', parameters('environment'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2021-02-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": ["10.0.0.0/16"]
        },
        "subnets": [
          {
            "name": "[variables('appSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.1.0/24",
              "delegations": [
                {
                  "name": "app-service-delegation",
                  "properties": {
                    "serviceName": "Microsoft.Web/serverFarms"
                  }
                }
              ]
            }
          },
          {
            "name": "[variables('dbSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.2.0/24",
              "delegations": [
                {
                  "name": "database-delegation",
                  "properties": {
                    "serviceName": "Microsoft.DBforPostgreSQL/flexibleServers"
                  }
                }
              ],
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2021-09-01",
      "name": "[parameters('containerRegistryName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[if(equals(parameters('environment'), 'prod'), 'Premium', 'Standard')]"
      },
      "properties": {
        "adminUserEnabled": true
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('appServicePlanSku')]",
        "tier": "[if(startsWith(parameters('appServicePlanSku'), 'B'), 'Basic', if(startsWith(parameters('appServicePlanSku'), 'S'), 'Standard', 'Premium'))]",
        "capacity": 2
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('logAnalyticsName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": "[if(equals(parameters('environment'), 'prod'), 90, 30)]"
      }
    },
    {
      "condition": "[parameters('enableApplicationInsights')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      ],
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-11-01-preview",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "enabledForDeployment": true,
        "enabledForTemplateDeployment": true,
        "enabledForDiskEncryption": true,
        "tenantId": "[tenant().tenantId]",
        "sku": {
          "name": "standard",
          "family": "A"
        },
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Deny",
          "virtualNetworkRules": [
            {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('appSubnetName'))]"
            }
          ]
        },
        "accessPolicies": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ]
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers",
      "apiVersion": "2021-06-01",
      "name": "[variables('databaseServerName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
      ],
      "sku": {
        "name": "[parameters('databaseSku')]",
        "tier": "[if(startsWith(parameters('databaseSku'), 'B_'), 'Burstable', if(startsWith(parameters('databaseSku'), 'GP_'), 'GeneralPurpose', 'MemoryOptimized'))]"
      },
      "properties": {
        "administratorLogin": "[parameters('dbAdminUsername')]",
        "administratorLoginPassword": "[parameters('dbAdminPassword')]",
        "version": "15",
        "storage": {
          "storageSizeGB": "[if(equals(parameters('environment'), 'prod'), 256, 128)]"
        },
        "backup": {
          "backupRetentionDays": "[if(equals(parameters('environment'), 'prod'), 30, 7)]",
          "geoRedundantBackup": "[if(equals(parameters('environment'), 'prod'), 'Enabled', 'Disabled')]"
        },
        "highAvailability": "[if(and(parameters('enableHighAvailability'), equals(parameters('environment'), 'prod')), createObject('mode', 'ZoneRedundant'), null())]",
        "network": {
          "delegatedSubnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('dbSubnetName'))]"
        }
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
      "apiVersion": "2021-06-01",
      "name": "[concat(variables('databaseServerName'), '/', variables('databaseName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('databaseServerName'))]"
      ],
      "properties": {
        "charset": "utf8",
        "collation": "en_US.utf8"
      }
    },
    {
      "condition": "[parameters('enableRedis')]",
      "type": "Microsoft.Cache/redis",
      "apiVersion": "2021-06-01",
      "name": "[variables('redisName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "[if(equals(parameters('environment'), 'prod'), 'Premium', 'Standard')]",
          "family": "[if(equals(parameters('environment'), 'prod'), 'P', 'C')]",
          "capacity": "[if(equals(parameters('environment'), 'prod'), 2, 1)]"
        },
        "enableNonSslPort": false,
        "minimumTlsVersion": "1.2",
        "redisConfiguration": {
          "maxmemory-policy": "allkeys-lru"
        }
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "[variables('backendAppName')]",
      "location": "[parameters('location')]",
      "kind": "app,linux,container",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('databaseServerName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('appSubnetName'))]",
        "siteConfig": {
          "linuxFxVersion": "[concat('DOCKER|', parameters('containerRegistryName'), '.azurecr.io/backend:latest')]",
          "alwaysOn": true,
          "appSettings": [
            {
              "name": "WEBSITES_PORT",
              "value": "8000"
            },
            {
              "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
              "value": "false"
            },
            {
              "name": "DOCKER_ENABLE_CI",
              "value": "true"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "[concat('https://', parameters('containerRegistryName'), '.azurecr.io')]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_USERNAME",
              "value": "[parameters('containerRegistryName')]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
              "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2021-09-01').passwords[0].value]"
            },
            {
              "name": "DATABASE_URL",
              "value": "[concat('postgresql://', parameters('dbAdminUsername'), ':', parameters('dbAdminPassword'), '@', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('databaseServerName'))).fullyQualifiedDomainName, ':5432/', variables('databaseName'), '?sslmode=require')]"
            },
            {
              "name": "DEBUG",
              "value": "[if(equals(parameters('environment'), 'prod'), 'false', 'true')]"
            },
            {
              "name": "LOG_LEVEL",
              "value": "[if(equals(parameters('environment'), 'prod'), 'WARNING', 'INFO')]"
            },
            {
              "name": "CORS_ORIGINS",
              "value": "[concat('https://', variables('frontendAppName'), '.azurewebsites.net')]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[if(parameters('enableApplicationInsights'), reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey, '')]"
            }
          ],
          "healthCheckPath": "/health"
        }
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "[variables('frontendAppName')]",
      "location": "[parameters('location')]",
      "kind": "app,linux,container",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('appSubnetName'))]",
        "siteConfig": {
          "linuxFxVersion": "[concat('DOCKER|', parameters('containerRegistryName'), '.azurecr.io/frontend:latest')]",
          "alwaysOn": true,
          "appSettings": [
            {
              "name": "WEBSITES_PORT",
              "value": "80"
            },
            {
              "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
              "value": "false"
            },
            {
              "name": "DOCKER_ENABLE_CI",
              "value": "true"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "[concat('https://', parameters('containerRegistryName'), '.azurecr.io')]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_USERNAME",
              "value": "[parameters('containerRegistryName')]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
              "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2021-09-01').passwords[0].value]"
            },
            {
              "name": "REACT_APP_API_URL",
              "value": "[concat('https://', variables('backendAppName'), '.azurewebsites.net/api')]"
            },
            {
              "name": "REACT_APP_ENVIRONMENT",
              "value": "[parameters('environment')]"
            }
          ],
          "healthCheckPath": "/"
        }
      }
    },
    {
      "type": "Microsoft.Insights/autoscalesettings",
      "apiVersion": "2015-04-01",
      "name": "[variables('autoscaleName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
      ],
      "properties": {
        "profiles": [
          {
            "name": "DefaultProfile",
            "capacity": {
              "minimum": "[parameters('autoscaleMinInstances')]",
              "maximum": "[parameters('autoscaleMaxInstances')]",
              "default": "2"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 70
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 30
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "MemoryPercentage",
                  "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "2",
                  "cooldown": "PT5M"
                }
              }
            ]
          },
          {
            "name": "WeekendProfile",
            "capacity": {
              "minimum": "1",
              "maximum": "5",
              "default": "1"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT10M"
                }
              }
            ],
            "recurrence": {
              "frequency": "Week",
              "schedule": {
                "timeZone": "UTC",
                "days": ["Saturday", "Sunday"],
                "hours": [0],
                "minutes": [0]
              }
            }
          }
        ],
        "enabled": true,
        "targetResourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]"
      }
    }
  ],
  "outputs": {
    "backendUrl": {
      "type": "string",
      "value": "[concat('https://', variables('backendAppName'), '.azurewebsites.net')]"
    },
    "frontendUrl": {
      "type": "string",
      "value": "[concat('https://', variables('frontendAppName'), '.azurewebsites.net')]"
    },
    "databaseFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', variables('databaseServerName'))).fullyQualifiedDomainName]"
    },
    "containerRegistryUrl": {
      "type": "string",
      "value": "[concat(parameters('containerRegistryName'), '.azurecr.io')]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    },
    "applicationInsightsInstrumentationKey": {
      "type": "string",
      "condition": "[parameters('enableApplicationInsights')]",
      "value": "[if(parameters('enableApplicationInsights'), reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).InstrumentationKey, '')]"
    }
  }
}